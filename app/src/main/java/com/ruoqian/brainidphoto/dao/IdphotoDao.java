package com.ruoqian.brainidphoto.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "idphoto".
*/
public class IdphotoDao extends AbstractDao<Idphoto, Long> {

    public static final String TABLENAME = "idphoto";

    /**
     * Properties of entity Idphoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property MWidth = new Property(2, Integer.class, "mWidth", false, "mWidth");
        public final static Property MHeight = new Property(3, Integer.class, "mHeight", false, "mHeight");
        public final static Property PWidth = new Property(4, Integer.class, "pWidth", false, "pWidth");
        public final static Property PHeight = new Property(5, Integer.class, "pHeight", false, "pHeight");
        public final static Property Dpi = new Property(6, Integer.class, "dpi", false, "dpi");
        public final static Property Price = new Property(7, float.class, "price", false, "price");
        public final static Property Ephoto = new Property(8, Integer.class, "ephoto", false, "ephoto");
        public final static Property Typesetting = new Property(9, Integer.class, "typesetting", false, "typesetting");
        public final static Property BgColor = new Property(10, String.class, "bgColor", false, "bgColor");
        public final static Property FileSize = new Property(11, String.class, "fileSize", false, "fileSize");
        public final static Property FileFormat = new Property(12, String.class, "fileFormat", false, "fileFormat");
        public final static Property IsPrint = new Property(13, Integer.class, "isPrint", false, "isPrint");
        public final static Property PId = new Property(14, Integer.class, "pId", false, "pId");
        public final static Property CreateTime = new Property(15, Long.class, "createTime", false, "createTime");
        public final static Property RecommendTime = new Property(16, Long.class, "recommendTime", false, "recommendTime");
        public final static Property CloudUpdateTime = new Property(17, Long.class, "cloudUpdateTime", false, "cloudUpdateTime");
        public final static Property CloudId = new Property(18, Long.class, "cloudId", false, "cloudId");
    }


    public IdphotoDao(DaoConfig config) {
        super(config);
    }
    
    public IdphotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"idphoto\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"mWidth\" INTEGER," + // 2: mWidth
                "\"mHeight\" INTEGER," + // 3: mHeight
                "\"pWidth\" INTEGER," + // 4: pWidth
                "\"pHeight\" INTEGER," + // 5: pHeight
                "\"dpi\" INTEGER," + // 6: dpi
                "\"price\" REAL NOT NULL ," + // 7: price
                "\"ephoto\" INTEGER," + // 8: ephoto
                "\"typesetting\" INTEGER," + // 9: typesetting
                "\"bgColor\" TEXT," + // 10: bgColor
                "\"fileSize\" TEXT," + // 11: fileSize
                "\"fileFormat\" TEXT," + // 12: fileFormat
                "\"isPrint\" INTEGER," + // 13: isPrint
                "\"pId\" INTEGER," + // 14: pId
                "\"createTime\" INTEGER," + // 15: createTime
                "\"recommendTime\" INTEGER," + // 16: recommendTime
                "\"cloudUpdateTime\" INTEGER," + // 17: cloudUpdateTime
                "\"cloudId\" INTEGER);"); // 18: cloudId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_idphoto_name ON \"idphoto\"" +
                " (\"name\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_idphoto_cloudId ON \"idphoto\"" +
                " (\"cloudId\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"idphoto\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Idphoto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer mWidth = entity.getMWidth();
        if (mWidth != null) {
            stmt.bindLong(3, mWidth);
        }
 
        Integer mHeight = entity.getMHeight();
        if (mHeight != null) {
            stmt.bindLong(4, mHeight);
        }
 
        Integer pWidth = entity.getPWidth();
        if (pWidth != null) {
            stmt.bindLong(5, pWidth);
        }
 
        Integer pHeight = entity.getPHeight();
        if (pHeight != null) {
            stmt.bindLong(6, pHeight);
        }
 
        Integer dpi = entity.getDpi();
        if (dpi != null) {
            stmt.bindLong(7, dpi);
        }
        stmt.bindDouble(8, entity.getPrice());
 
        Integer ephoto = entity.getEphoto();
        if (ephoto != null) {
            stmt.bindLong(9, ephoto);
        }
 
        Integer typesetting = entity.getTypesetting();
        if (typesetting != null) {
            stmt.bindLong(10, typesetting);
        }
 
        String bgColor = entity.getBgColor();
        if (bgColor != null) {
            stmt.bindString(11, bgColor);
        }
 
        String fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindString(12, fileSize);
        }
 
        String fileFormat = entity.getFileFormat();
        if (fileFormat != null) {
            stmt.bindString(13, fileFormat);
        }
 
        Integer isPrint = entity.getIsPrint();
        if (isPrint != null) {
            stmt.bindLong(14, isPrint);
        }
 
        Integer pId = entity.getPId();
        if (pId != null) {
            stmt.bindLong(15, pId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(16, createTime);
        }
 
        Long recommendTime = entity.getRecommendTime();
        if (recommendTime != null) {
            stmt.bindLong(17, recommendTime);
        }
 
        Long cloudUpdateTime = entity.getCloudUpdateTime();
        if (cloudUpdateTime != null) {
            stmt.bindLong(18, cloudUpdateTime);
        }
 
        Long cloudId = entity.getCloudId();
        if (cloudId != null) {
            stmt.bindLong(19, cloudId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Idphoto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer mWidth = entity.getMWidth();
        if (mWidth != null) {
            stmt.bindLong(3, mWidth);
        }
 
        Integer mHeight = entity.getMHeight();
        if (mHeight != null) {
            stmt.bindLong(4, mHeight);
        }
 
        Integer pWidth = entity.getPWidth();
        if (pWidth != null) {
            stmt.bindLong(5, pWidth);
        }
 
        Integer pHeight = entity.getPHeight();
        if (pHeight != null) {
            stmt.bindLong(6, pHeight);
        }
 
        Integer dpi = entity.getDpi();
        if (dpi != null) {
            stmt.bindLong(7, dpi);
        }
        stmt.bindDouble(8, entity.getPrice());
 
        Integer ephoto = entity.getEphoto();
        if (ephoto != null) {
            stmt.bindLong(9, ephoto);
        }
 
        Integer typesetting = entity.getTypesetting();
        if (typesetting != null) {
            stmt.bindLong(10, typesetting);
        }
 
        String bgColor = entity.getBgColor();
        if (bgColor != null) {
            stmt.bindString(11, bgColor);
        }
 
        String fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindString(12, fileSize);
        }
 
        String fileFormat = entity.getFileFormat();
        if (fileFormat != null) {
            stmt.bindString(13, fileFormat);
        }
 
        Integer isPrint = entity.getIsPrint();
        if (isPrint != null) {
            stmt.bindLong(14, isPrint);
        }
 
        Integer pId = entity.getPId();
        if (pId != null) {
            stmt.bindLong(15, pId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(16, createTime);
        }
 
        Long recommendTime = entity.getRecommendTime();
        if (recommendTime != null) {
            stmt.bindLong(17, recommendTime);
        }
 
        Long cloudUpdateTime = entity.getCloudUpdateTime();
        if (cloudUpdateTime != null) {
            stmt.bindLong(18, cloudUpdateTime);
        }
 
        Long cloudId = entity.getCloudId();
        if (cloudId != null) {
            stmt.bindLong(19, cloudId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Idphoto readEntity(Cursor cursor, int offset) {
        Idphoto entity = new Idphoto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // mWidth
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // mHeight
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pWidth
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // pHeight
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // dpi
            cursor.getFloat(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ephoto
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // typesetting
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bgColor
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fileSize
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // fileFormat
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // isPrint
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // pId
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // createTime
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // recommendTime
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // cloudUpdateTime
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18) // cloudId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Idphoto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMWidth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMHeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPWidth(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPHeight(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDpi(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPrice(cursor.getFloat(offset + 7));
        entity.setEphoto(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTypesetting(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBgColor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFileSize(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFileFormat(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsPrint(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPId(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCreateTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setRecommendTime(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setCloudUpdateTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setCloudId(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Idphoto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Idphoto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Idphoto entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
