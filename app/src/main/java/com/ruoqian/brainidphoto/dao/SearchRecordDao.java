package com.ruoqian.brainidphoto.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "search_record".
*/
public class SearchRecordDao extends AbstractDao<SearchRecord, Long> {

    public static final String TABLENAME = "search_record";

    /**
     * Properties of entity SearchRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property KeyWord = new Property(1, String.class, "keyWord", false, "keyWord");
        public final static Property Type = new Property(2, int.class, "type", false, "type");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "createTime");
    }


    public SearchRecordDao(DaoConfig config) {
        super(config);
    }
    
    public SearchRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"search_record\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"keyWord\" TEXT," + // 1: keyWord
                "\"type\" INTEGER NOT NULL ," + // 2: type
                "\"createTime\" INTEGER);"); // 3: createTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_search_record_keyWord ON \"search_record\"" +
                " (\"keyWord\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"search_record\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String keyWord = entity.getKeyWord();
        if (keyWord != null) {
            stmt.bindString(2, keyWord);
        }
        stmt.bindLong(3, entity.getType());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String keyWord = entity.getKeyWord();
        if (keyWord != null) {
            stmt.bindString(2, keyWord);
        }
        stmt.bindLong(3, entity.getType());
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchRecord readEntity(Cursor cursor, int offset) {
        SearchRecord entity = new SearchRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // keyWord
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
