package com.ruoqian.brainidphoto.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "idphoto_color".
*/
public class IdphotoColorDao extends AbstractDao<IdphotoColor, Long> {

    public static final String TABLENAME = "idphoto_color";

    /**
     * Properties of entity IdphotoColor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Val = new Property(1, String.class, "val", false, "val");
        public final static Property CreateTime = new Property(2, Long.class, "createTime", false, "createTime");
        public final static Property CloudUpdateTime = new Property(3, Long.class, "cloudUpdateTime", false, "cloudUpdateTime");
        public final static Property CloudId = new Property(4, Long.class, "cloudId", false, "cloudId");
    }


    public IdphotoColorDao(DaoConfig config) {
        super(config);
    }
    
    public IdphotoColorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"idphoto_color\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"val\" TEXT," + // 1: val
                "\"createTime\" INTEGER," + // 2: createTime
                "\"cloudUpdateTime\" INTEGER," + // 3: cloudUpdateTime
                "\"cloudId\" INTEGER);"); // 4: cloudId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_idphoto_color_cloudId ON \"idphoto_color\"" +
                " (\"cloudId\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"idphoto_color\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IdphotoColor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String val = entity.getVal();
        if (val != null) {
            stmt.bindString(2, val);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime);
        }
 
        Long cloudUpdateTime = entity.getCloudUpdateTime();
        if (cloudUpdateTime != null) {
            stmt.bindLong(4, cloudUpdateTime);
        }
 
        Long cloudId = entity.getCloudId();
        if (cloudId != null) {
            stmt.bindLong(5, cloudId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IdphotoColor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String val = entity.getVal();
        if (val != null) {
            stmt.bindString(2, val);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(3, createTime);
        }
 
        Long cloudUpdateTime = entity.getCloudUpdateTime();
        if (cloudUpdateTime != null) {
            stmt.bindLong(4, cloudUpdateTime);
        }
 
        Long cloudId = entity.getCloudId();
        if (cloudId != null) {
            stmt.bindLong(5, cloudId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IdphotoColor readEntity(Cursor cursor, int offset) {
        IdphotoColor entity = new IdphotoColor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // val
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cloudUpdateTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // cloudId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IdphotoColor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVal(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCloudUpdateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCloudId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IdphotoColor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IdphotoColor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IdphotoColor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
